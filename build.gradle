import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: "config.gradle"

buildscript { //gradle脚本执行所需依赖
    ext {
        //为了兼容AOP，所以将kotlin版本从1.4.0降到了1.3.61
        kotlin_version = "1.3.61"
    }
    repositories {
        maven{
            url './gradleplugin/repo/'
        }
        google()
        jcenter()
    }
    dependencies {
        //https://developer.android.com/studio/releases/gradle-plugin?hl=zh-cn
        //为了兼容AOP，所以将kotlin版本从1.4.0降到了1.3.61
        classpath "com.android.tools.build:gradle:3.6.1"
        //
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
        //AOP https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx
        classpath 'com.hujiang.aspectjx:gradle-android-plugin-aspectjx:2.0.10'
        //自定义的Gradle插件
        classpath "com.example.gradleplugin:gradleplugin:1.0.0"
        //上传代码到JCenter的插件
        classpath 'com.novoda:bintray-release:0.9.2'
    }
}

allprojects { //项目本身需要的依赖
    repositories {
        google()
        jcenter()
        //微博SDK需要 https://github.com/sinaweibosdk/weibo_android_sdk
        maven { url "https://dl.bintray.com/thelasterstar/maven/" }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

//AOP配置
allprojects { Project project ->
    def variants = null
    if (project.name == 'app') {
        apply plugin: 'com.android.application'
        variants = project.android.applicationVariants
    } else if (project.name == 'common' ||
            project.name == 'shake' ||
            project.name == 'webview_module') {
        apply plugin: 'com.android.library'
        variants = project.android.libraryVariants
    }
    if (variants == null) {
        return
    }
    //AOP日志输出
    final def log = project.logger
    //在构建工程时，执行编织
    variants.all { variant ->
        if (!variant.buildType.isDebuggable()) {
            log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
            return
        }

        TaskProvider<JavaCompile> provider =  variant.javaCompileProvider
        JavaCompile javaCompile = provider.get()
        javaCompile.doLast {
            String[] args = ["-showWeaveInfo",
                             "-1.8",
                             "-inpath", javaCompile.destinationDir.toString(),
                             "-aspectpath", javaCompile.classpath.asPath,
                             "-d", javaCompile.destinationDir.toString(),
                             "-classpath", javaCompile.classpath.asPath,
                             "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
            log.debug "ajc args: " + Arrays.toString(args)

            MessageHandler handler = new MessageHandler(true)
            new Main().run(args, handler)
            for (IMessage message : handler.getMessages(null, true)) {
                switch (message.getKind()) {
                    case IMessage.ABORT:
                    case IMessage.ERROR:
                    case IMessage.FAIL:
                        log.error message.message, message.thrown
                        break
                    case IMessage.WARNING:
                        log.warn message.message, message.thrown
                        break
                    case IMessage.INFO:
                        log.info message.message, message.thrown
                        break
                    case IMessage.DEBUG:
                        log.debug message.message, message.thrown
                        break
                }
            }
        }
    }
}